{
	"Print to console": {
		"prefix": "cl",
		"body": [
			"console.log($1);"
		]
	},
	"Angular router": {
		"prefix": "router",
		"body": [
			"angular.module('${1:AppName}', ['ngRoute'])",
			"\t.config(\\$routeProvider => {",
			"\t\t\\$routeProvider",
			"\t\t\t.when('${2:path}', {",
			"\t\t\t\ttemplateUrl: '${3:partialPath}',",
			"\t\t\t\tcontroller: '${4:ctrlPath}'",
            "\t\t\t})",
            "\t\t\t.otherwise('${5:otherwisePath}');",
    		"});"
		]
	},
	"Angular controller": {
		"prefix": "ngController",
		"body": [
			"angular.module('${1:AppName}').controller('$2Ctrl', function(\\$scope) {",
			"\t$3",
			"});"
		]
	},
	"Angular factory": {
		"prefix": "factory",
		"body": [
			"angular.module('${1:AppName}').factory('$2Factory', function(\\$q, \\$http) {",
			"\t$3",
			"});"
		]
	},
	"Use strict": {
		"prefix": "use",
		"body": [
			"'use strict';",
			"\n"
		]
	},
	"return $q": { 
		"prefix": "rq",
		"body": [
			"return \\$q((resolve, reject) => {",
			"\t$1",
			"});"
		]
	},
	"Direct execution": {
		"prefix": "dx",
		"body": "#!/usr/bin/env node"
	},
	"Try/catch" : {
		"prefix": "tc",
		"body": [
			"try {",
			"\t$1",
			"} catch(err) {",
			"\tconsole.log('Error', err);",
			"}"
		]
	},
	"Process exit": {
		"prefix": "pe",
		"body": [
			"process.exit();"
		]
	},
	"Sqlite3": {
		"prefix": "s3",
		"body": [
			"sqlite3"
		]
	},
	"return new Promise": {
		"prefix": "rp",
		"body": [
			"return new Promise((resolve, reject) => {",
			"\t$1",
			"});"
		]
	},
	"nested describe block": {
		"prefix": "ddi",
		"body": [
			"describe('$1', () => {",
			"\tdescribe('$2', () => {",
			"\t\tit('$3', () => {",
			"\t\t\t$4",
			"\t\t});",
			"\t});",
			"});"
		]
	},
	"describe block": {
		"prefix": "di",
		"body": [
			"describe('$1', () => {",
			"\tit('$2', () => {",
			"\t\t$3",
			"\t});",
			"});"
		]
	},
	"it block": {
		"prefix": "it",
		"body": [
			"it('$1', () => {",
			"\t$2",
			"});"
		]
	},
	"require chai": {
		"prefix": "ch",
		"body": [
			"const { assert } = require('chai');\n"
		]
	},
	"require sqlite3": {
		"prefix": "rs",
		"body": [
			"const sqlite3 = require('sqlite3').verbose();\n"
		]
	},
	"new sqlite3 database": {
		"prefix": "ns",
		"body": [
			"const db = new sqlite3.Database('$1.sqlite');"
		]
	}
}