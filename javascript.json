{
  "empty describe block": {
    "prefix": "des",
    "body": ["describe('$1', () => {", "\t$2", "})"]
  },
  "describe block": {
    "prefix": "di",
    "body": [
      "describe('$1', () => {",
      "\tit('$2', () => {",
      "\t\t$3",
      "\t});",
      "});"
    ]
  },
  "it each": {
    "prefix": "each",
    "body": [
      "it.each([",
      "\t['$1', $2],",
      "])('%s', (name, $3) => {",
      "\t$4",
      "})"
    ]
  },
  "it block": {
    "prefix": "it",
    "body": ["it('$1', () => {", "\t$2", "});"]
  },
  // work only
  "Error": {
    "prefix": "err",
    "body": [
      "const error = new Error('$1 server error')",
      "error.response = {}"
    ]
  },
  "Spawn provision": {
    "prefix": "spawn",
    "body": "[spawn.fn(errorHandler)],"
  },
  "Spawn matcher": {
    "prefix": ".spawn",
    "body": ".spawn(errorHandler, error)"
  },
  "Mock Date.now": {
    "prefix": "md",
    "body": [
      "const oldDateNow = Date.now",
      "beforeAll(() => {",
      "\tDate.now = jest.fn(() => new Date('2020-01-01T12:00:00Z').getTime())",
      "})",
      "afterAll(() => {",
      "\tDate.now = oldDateNow",
      "})"
    ]
  },
  "Cancel saga tests": {
    "prefix": "canc",
    "body": [
      "it('can be cancelled', () => {",
      "\tfunction * sagaCanceller () {",
      "\t\tconst task = yield realFork($1, { payload$2 })",
      "\t\tyield realCancel(task)",
      "\t}",
      "\tconst cancelSpy = jest.fn((task, next) => {",
      "\t\texpect(isSagaTask(task)).toBe(true)",
      "\t\texpect(task.meta.name).toBe('$1')",
      "\t\treturn next()",
      "\t})",
      "\treturn expectSaga(sagaCanceller)",
      "\t\t.provide({ cancel: cancelSpy })",
      "\t\t.not.put.actionType(CONSTANTS.$3)",
      "\t\t.put(wasCancelled())",
      "\t\t.run()",
      "})"
    ]
  }
}
